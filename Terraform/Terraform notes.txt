ISO for linux: hyrenrescue

Introduction:
    - falls under the category of IaC.
        - benefits 
            -- reusability
            -- consistent
            -- shareable
    
    - IaC categories:
        - Ad-hoc scripts:
            -- bash, python etc
        - configuration management:
            -- ansible, puppet
        - Provisioning:
            -- terraform, ARM(azure resource manager)
        
    what is terraform:
        - owned by hashicorp
        - code is done in HCL
        - used to build, change and manage cloud infrastructure

    terraform workflow:
        - init -> plan -> apply -> destroy

    Basic terminologies:
        - terraform core: terraform binary that serves as the root command
        - providers: 
            -- three types
                1. official
                2. verified
                3. community
        
        - In the beginning of the file we define the provider block
        - Than we can define the variable block
        - Than we can have a resource block

    - lifecycle rules: to place restrictions.

Basic commands:
    - terraform 
        -- version
        -- providers: cloud provider
        -- fmt :used for formatting
        -- init: used to initialize
        -- validate: validates the tf code
        -- plan: dry run
        -- apply: apply the changes
        -- destroy: destroy the infrasture
        -- show: displays the current deployment state
        -- state list: displayes the resources that are deployed through apply
        -- output: 
        -- refresh: updates the state file with metadata with physical resources, used when any update is done on console
        -- force-unlock: 
        -- taint/untaint: mark any resource for recreation
        -- import: we can import the infrasture to terraform

    - hashicorp documentation gives the complete explanation and code example for all resources. 

    FQDN(specific, complete, and includes hostname as well) vs DN(only mentions the domain name such as gmail.com)

    local values: mainly tags
        - can be defined in locals module
    output values: return values
        - 

    Lifecycle Rule:
        - prevents accidental deletion from terraform
    
    Terraform dependancy tree:
        - we can define the resources that are depending on another resource which needs to be deployed first. 
    
    

resource "azurerm_resource_group" "rg1" {
    name = ""
    location = ""
}

resource "azurerm_virtual_network" "vnet1" {
    name = "" 
    location = "" 
    resource_group_name = ""
    address_spaces = [""]
    dns_servers = [""]
}

resource "azurerm_subnet" "subnet1" {
    name = ""
    resource_group_name = ""
    virtual_network_name = ""
    address_prefixes = [""]
}

resource "azurerm_network_security_group" "nsg1" {
    name = ""
    location = ""
    resource_group_name = ""
    security_rule {
        name = ""
        priority = integer
        direction = "Inbound/Outbound"
        access = "Allow"
        protocol = "Tcp"
        source_port_range = "*"
        destination_port_range = "22" or etc
        source_address_prefix = "*"
        destination_address_prefix = "*"
    }
}

resource "azurerm_subnet_network_security_group_association" "asc1" {
    subnet_id = ""
    network_security_group_id = ""
}

resource "azurerm_network_interface" "" {
    name = ""
    location = ""
    resource_group_name = ""

    ip_configuration {
        name = ""
        subnet_id = ""
        private_ip_address_allocation = ""
        public_ip_address_id = azurerm_public_ip.pip1.id
    }
}

resource "azurerm_public_ip" "" {
    name = ""
    location = ""
    resource_group_name = ""
    allocation_method = "Dynamic/Static"
}

resource "azurerm_virtual_machine" "vm1" {
    name = ""
    location = ""
    resource_group_name = ""
    size = ""
    admin_username = ""
    network_interface_ids = [
        azurerm_network_interface.nic1.id
    ]

    admin_ssh_key {
        username = ""
        public_key = file("")
    }

    os_disk {
        name = ""
        caching = ""
        storage_account_type = "Premium_LRS"
        disk_size_gb = 32
    }

    source_image_reference {
        publisher = "Canonical"
        offer = "UbuntuServer"
        version = "latest"
        sku = "18.04-LTS"
    }

    tags = {
        name = local.name
    }
    lifecycle_rule  {prevent_destroy = true}
    lifecycle_rule  { ignore_changes = [tags]}
}